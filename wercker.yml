build:
  box: alpine
  docker: true
  steps:
    - script:
        name: Install docker
        code: apk --no-cache add docker
    - script:
        name: Install Curl
        code: apk --no-cache add curl
    - script:
        name: Install clair-scanner
        code: |
          curl -L -O https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
          mv clair-scanner_linux_amd64 clair-scanner
          chmod +x clair-scanner
    - script:
      name: Start up clair server and database
      code: |
        NETWORK=`docker network ls | grep "w-" | awk ' { print $1; } '`
        docker run --network $NETWORK --name postgres --rm -d arminc/clair-db:2018-11-25
        sleep 10 # to make sure clair service has started
        docker run --network $NETWORK --name clair --rm -d arminc/clair-local-scan:v2.0.6
    - script:
      name: Scan an image
      code: |
        docker pull vulnerables/web-dvwa
        echo "docker network:"
        docker network ls | grep "w-" | awk ' { print $1; } ' | xargs docker network inspect
        docker ps -a
        ./clair-scanner --ip=`hostname -i` --report="report.json" --clair="http://clair:6060" vulnerables/web-dvwa
        cat report.json
        OK=`grep "\"vulnerabilities\": \[\]" report.json | wc -l`
        echo $OK
        if [ "$OK" == "1" ]; then
          echo "image was clean, continuing..."
        else
          echo "image had vulnerability, aborting"
          exit 1
        fi
    - script:
      name: Do something else
      code: |
        echo "something else..."
